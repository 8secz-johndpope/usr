#
# -------------------------------------------------------------------------
# RenderMan_for_Maya.ini $Revision: #1 $
#   This file contains required initialization settings for RenderMan_for_Maya.
#   We suggest that you not edit this file, but rather place overrides and
#   extensions in a file of the same name located in your prefs directory.
#   Please refer to documentation pertaining to RMS_SCRIPT_PATHS.
#--------------------------------------------------------------------------
#

SetPref BatchCompileMode lazy; # lazy, zealous

SetPref DisableSwatchRender 0;
SetPref DisableRifShaderAttachment 0
SetPref DisableCacheInZip 0

# The Job Phase Tree represents the dependencies between Job Phases.
# Individual rendering passes and other commands (texture conversion,
# file cleanup, etc.) can be stored within a known phase.  Phases
# can be repeated according to the Job Settings.

SetPref JobPhaseTree {
    /Job
    /Job/Preamble -referenceFrame _JobSettings
    /Job/Preflight -referenceFrame _JobSettings
    /Job/Preflight/Prerender
    /Job/Preflight/Maps
    /Job/Preflight/Maps/Shadow
    /Job/Preflight/Maps/Photon
    /Job/Preflight/Maps/GlobalDiffuse
    /Job/Preflight/Maps/Subsurface
    /Job/Preflight/Maps/SlimBake
    /Job/Preflight/Maps/Environment
    /Job/Preflight/Maps/Reflection
    /Job/Preflight/Maps/Reference
    /Job/Preflight/Images
    /Job/Preflight/Cleanup
    /Job/Frames -repeat _JobSettings
    /Job/Frames/Prerender
    /Job/Frames/Maps
    /Job/Frames/Maps/Shadow
    /Job/Frames/Maps/Photon
    /Job/Frames/Maps/GlobalDiffuse
    /Job/Frames/Maps/Subsurface
    /Job/Frames/Maps/SlimBake
    /Job/Frames/Maps/Environment
    /Job/Frames/Maps/Reflection
    /Job/Frames/Maps/Reference
    /Job/Frames/Images
    /Job/Frames/Cleanup
    /Job/Cleanup
}
# These are the job phases that are required to exist.
SetPref JpJob /Job
SetPref JpPreamble /Job/Preamble
SetPref JpPreflightCleanup  /Job/Preflight/Cleanup
SetPref JpFramePrerender /Job/Frames/Prerender
SetPref JpFrameCleanup /Job/Frames/Cleanup
SetPref JpCleanup /Job/Cleanup

# The PassRefValidityTable maps each pass class to a list of
# classes in which such a reference would be valid.  For example, Shadow
# passes may be referenced by shaders in Final passes, but it wouldn't
# make sense for Shadow passes to be referenced by shaders in Shadow passes.
# When shader parameters containing pass references are output at render 
# time this table is used to determine which pass references to expand.

SetPref PassRefValidityTable {
    TxMake {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender Shadow DeepShadow \
            AreaShadow SSRender RenderGlobalDiffuse3d RenderApproxGlobalDiffuse \
            RenderCaustic ScatterVolumeRender}
    Reference {}

    Shadow {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender SSRender \
	RenderRadiosity RenderGlobalDiffuse3d ScatterVolumeRender}
    MinMaxShadow {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender SSRender \
	RenderRadiosity RenderGlobalDiffuse3d ScatterVolumeRender}
    DeepShadow {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender SSRender \
	RenderRadiosity RenderGlobalDiffuse3d ScatterVolumeRender}
    AreaShadow {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender SSRender \
	RenderRadiosity RenderGlobalDiffuse3d ScatterVolumeRender}
    
    RenderGlobalDiffuse3d {RenderGlobalDiffuse3d MakeGlobalDiffuse3d}
    MakeGlobalDiffuse3d {MakeGlobalDiffuse3d Final Preview Rerender ReyesRerender BakeRender \
	ReferenceRender Reflection SSRender ScatterVolumeRender}
    
    RenderRadiosity {RenderRadiosity RenderApproxGlobalDiffuse \
	Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection SSRender \
        FilterApproxGlobalDiffuse PartialFilterApproxGlobalDiffuse}
    RenderApproxGlobalDiffuse {RenderApproxGlobalDiffuse \
        MakeApproxGlobalDiffuse RenderRadiosity}
    MakeApproxGlobalDiffuse { MakeApproxGlobalDiffuse \
	Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection SSRender}
    MakeFilterApproxGlobalDiffuse { MakeFilterApproxGlobalDiffuse \
	Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection SSRender}
    FilterApproxGlobalDiffuse { FilterApproxGlobalDiffuse \
	RenderRadiosity Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection SSRender}
    PartialFilterApproxGlobalDiffuse { PartialFilterApproxGlobalDiffuse \
	RenderRadiosity Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection SSRender}

    RenderCaustic {Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection}

    BakeRender {BakeRender}

    SSRender {SSRender SSOrganize SSDiffuse SSMakeBrickmap}
    SSOrganize {SSRender Final Preview Rerender ReyesRerender BakeRender ReferenceRender Reflection}
    SSDiffuse {SSRender SSDiffuse SSMakeBrickmap Final Preview Rerender ReyesRerender BakeRender \
        ReferenceRender Reflection}
    SSMakeBrickmap {SSRender SSDiffuse SSMakeBrickmap Final Preview Rerender ReyesRerender BakeRender \
	ReferenceRender Reflection}

    SBRender {SBRender SBPtRender SBMakePtCloud SBMakePtex SBMakeBrickmap}
    SBPtRender {SBRender SBPtRender SBMakePtCloud SBMakePtex SBMakeBrickmap \
        Final Preview Rerender ReyesRerender BakeRender ReferenceRender}
    SBMakePtCloud {SBRender SBMakePtCloud \
        Final Preview Rerender ReyesRerender BakeRender ReferenceRender}
    SBMakePtex {SBRender SBMakePtex \
        Final Preview Rerender ReyesRerender BakeRender ReferenceRender}
    SBMakeBrickmap {SBRender SBMakeBrickmap \
        Final Preview Rerender ReyesRerender BakeRender ReferenceRender}

    ScatterVolumeRender {ScatterVolumeRender VolumeScatter} 
    VolumeScatter {Final Preview Rerender ReyesRerender ReferenceRender Reflection}

    Reflection {Final Preview Rerender ReyesRerender BakeRender ReferenceRender}
    Environment {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender}
    EnvMap {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender}
    EnvCube {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender}
    EnvRender {Final Preview Rerender ReyesRerender BakeRender Reflection ReferenceRender}
    ReferenceRender {Final Preview Rerender ReyesRerender BakeRender}

    Final {Final}  
    Preview {Preview}
    Rerender  {Rerender}
    ReyesRerender  {ReyesRerender}
}

SetPref FinalPassClasses {Final Preview Rerender}

# The ImageFormatQuantizationTable allows image format and quantization 
# to be controlled simultaneously so that unsupported combinations can be 
# avoided.  Entries in this table appear as entries in the "Image Format" 
# option menu in the Render Globals.  The first element in each triple is 
# a label.  The second element is an image format, the third is a 
# quantization which will be set when the entry is selected.  The entries
# of the quantization value are for zero, one, min, max, dither.

SetPref ImageFormatQuantizationTable {
    {Alias (alias)} alias {0 255 0 255 0.5}
    {Cineon (cin)} cineon {0 65535 0 65535 0}
    {MayaIFF (iff)} mayaiff {0 255 0 255 0.5}
    {OpenEXR (exr)} openexr {0 0 0 0 0}
    {SGI8 (sgi)} sgif {0 255 0 255 0.5}
    {SGI16 (sgi)} sgif {0 65535 0 65535 0}
    {SoftImage (pic)} softimage {0 255 0 255 0.5}
    {Targa (tga)} targa {0 255 0 255 0.5}
    {Tiff8 (tif)} tiff {0 255 0 255 0.5}
    {Tiff16 (tif)} tiff {0 65535 0 65535 0}
    {Tiff32 (tif)} tiff {0 0 0 0 0}
    {Texture8 (tex)} texture {0 255 0 255 0.5}
    {Texture16 (tex)} texture {0 65535 0 65535 0}
    {Texture32 (tex)} texture {0 0 0 0 0}
    {DeepImage (.dtex)} deepshad {0 0 0 0}
    {It8 (it)} it {0 255 0 255 0.5}
    {It16 (it)} it {0 65535 0 65535 0}
    {It32 (it)} it {0 0 0 0 0}
}

SetPref Framebuffer internal; # alternatively: external

# Prefs which begin with RManPreset_## will appear as entries in the 
# Render Settings window under the Presets->Load Preset menu.
# Each collection of presets can include any number of global settings
# which should be set accordingly when the preset is loaded.
SetPref RManPreset_01_Draft {
    settings:job:Job ShadingRate 10
    settings:job:Job PixelSamples {3 3}
    settings:job:Job trace:maxdepth 4
    settings:job:Job trace:maxspeculardepth 2
    settings:job:Job trace:maxdiffusedepth 1
    settings:display:Primary Display:filter {separable-catmull-rom}
    settings:display:Primary Display:filterwidth {2 2}
    pass:render:Shadow ShadingRate 10
    pass:render:DeepShadow ShadingRate 10
    pass:render:DeepShadow PixelSamples {3 3}
}

SetPref RManPreset_02_Intermediate {
    settings:job:Job ShadingRate 2
    settings:job:Job PixelSamples {5 5}
    settings:job:Job trace:maxdepth 4
    settings:job:Job trace:maxspeculardepth 2
    settings:job:Job trace:maxdiffusedepth 1
    settings:display:Primary Display:filter {separable-catmull-rom}
    settings:display:Primary Display:filterwidth {2 2}
    pass:render:Shadow ShadingRate 2
    pass:render:DeepShadow ShadingRate 2
    pass:render:DeepShadow PixelSamples {3 3}
}

SetPref RManPreset_03_Production {
    settings:job:Job ShadingRate 1
    settings:job:Job PixelSamples {11 11}
    settings:job:Job trace:maxdepth 10
    settings:job:Job trace:maxspeculardepth 4
    settings:job:Job trace:maxdiffusedepth 1
    settings:display:Primary Display:filter {separable-catmull-rom}
    settings:display:Primary Display:filterwidth {2 2}
    pass:render:Shadow ShadingRate 1
    pass:render:DeepShadow ShadingRate 1
    pass:render:DeepShadow PixelSamples {5 5}
}

# A menu of these spool styles appears in the Maya batch render dialog window.
# These pairs consist of a label and a mel script. The mel script must return 
# the name of the alfred job script that it generates.
SetPref AlfredSpoolScripts {
    "mayabatch local" rmanSpoolMayaLocal
    "mayabatch remote" rmanSpoolMayaRemote
}

#SetPref TractorDashboardURL {http://tractor-monitor/tractor/dashboard/}
SetPref TractorDashboardURL {http://138.25.37.139:5600/tractor/dashboard/}
SetPref TractorEngine {138.25.37.139:5600}
SetPref TractorUser {pixar}

SetPref DefaultEnvKey \
    "rms-[GetVersion product]-maya-[GetPlatform rfm_mayaversion]"

# We rely on you setting your path to alfred or tractor
SetPref alfredLaunchPath alfred;

SetPref LocalQueueLaunchPath [file join $RMSTREE bin LocalQueue]
SetPref ptrenderLaunchPath [file join $RMSTREE rmantree bin ptrender]

switch $::tcl_platform(os) {
    "Darwin" {
        SetPref itLaunchPath [file join $RMSTREE bin it.app Contents MacOS it]
    }
    default {
        SetPref itLaunchPath [file join $RMSTREE bin it]
    }
}

# The outputs listed below in the OutputClasses pref will appear in the menu
# for adding outputs under the Passes tab.  The names listed
# here correspond to declared display channels.  You may add your own type of
# output to this list.
SetPref StdAOVs {
    "normal N"
    "normal Ng"
    "point P"
    "float s"
    "float t"
    "float u"
    "float v"
    "color Cs"
    "color Os"
    "color Ci"
    "color Oi"
    "float a"
    "vector dPdtime"
    "float __CPUtime"
}
SetPref MayaAOVs {
    "color GlowColor"
}
# these CompAOVs are directly supported by Factory templates and nodes.
SetPref CompAOVs {
    "color Ambient"
    "color DiffuseColor"
    "color DiffuseDirect"
    "color DiffuseDirectShadow"
    "color DiffuseIndirect"
    "color DiffuseEnvironment"
    "color SpecularColor"
    "color SpecularDirect"
    "color SpecularDirectShadow"
    "color SpecularIndirect"
    "color SpecularEnvironment"
    "color Backscattering"
    "color Incandescence"
    "color Refraction"
    "color Rim"
    "color Translucence"
    "color Subsurface"
    "color OcclusionDirect"
    "color OcclusionIndirect"
}

SetPref BakeAOVs {
    "color _indirectdiffuse"
    "float _occlusion"
    "vector _environmentdir"
    "float _area"
    "color _radiosity"
    "color _extinction"
    "color _radiance_t"
    "color _albedo"
    "color _diffusemeanfreepath"
    "float _float"
    "color _color"
}

SetPref GPAOVs {
    "point wP"
    "normal wN"
    "float Z"
    "color Diffuse"
    "color DiffuseShadow"
    "color Specular"
    "color SpecularShadow"
    "color DiffuseIndirect"
    "color SpecularIndirect"
    "color Incandescence"
    "color Subsurface"
    "color Refraction"
    "float id"
    "float Occlusion"
}


foreach aov [concat [GetPref StdAOVs] [GetPref CompAOVs] \
                    [GetPref MayaAOVs] [GetPref GPAOVs]] {
    foreach {type nm} $aov {
	lappend aovNames $nm
    }
}
SetPref OutputClasses $aovNames

# These are the AOV prefs which will appear in the RenderMan Controls
SetPref AOVTabs {
    "Standard" StdAOVs
    "AP Comp" CompAOVs
    "GP Comp" GPAOVs
    "Maya" MayaAOVs
}

SetPref CreateMenuPassClasses {
    "Final"
    "Preview"
    "TxMake"
}

# Folks who never like polygons, can set rmanMeshRep to subdiv
# You can also override the interpretation of polygon meshes with
# a per-mesh attribute rmanSubdiv (or mtorSubdiv):  0: mesh, 1: subdiv
SetPref rmanMeshRep mesh

# Setting the FurStyle pref to legacy causes RfM to ignore 
# equalizer maps and calc area values.
#SetPref FurStyle legacy

# Load critical RfM interface definition files.  
set rfmLibDir [file join [RATGetDir lib] rfm]
set cfg $rfmLibDir

# Load RfM-specific extensions to RMSExpression
LoadExtension tcl [file join $cfg RfMExpression.tcl]
LoadExtension tcl [file join $cfg RfMPassExpression.tcl]
LoadExtension tcl [file join $cfg RfMWorkExpression.tcl]

# first define known options, attributes and shader parameters
LoadExtension rman [file join $cfg decl_torcontrols.rman]
LoadExtension rman [file join $cfg decl_rioptions.rman]
LoadExtension rman [file join $cfg decl_riattributes.rman]
LoadExtension rman [file join $cfg decl_cmdparams.rman]
LoadExtension rman [file join $cfg decl_shaderparameters.rman]

# node definitions, nodes_base.rman defines some common collections
# that are referenced by other nodes_ files and so should precede others.
LoadExtension rman [file join $cfg nodes_base.rman]
LoadExtension rman [file join $cfg nodes_rif.rman]
LoadExtension rman [file join $cfg nodes_shadow.rman]
LoadExtension rman [file join $cfg nodes_globalillum.rman]
LoadExtension rman [file join $cfg nodes_subsurf.rman]
LoadExtension rman [file join $cfg nodes_envlight.rman]
LoadExtension rman [file join $cfg nodes_envmap.rman]
LoadExtension rman [file join $cfg nodes_volumescatter.rman]

# optional parameters for maya nodes
LoadExtension rman [file join $cfg nodeoptions.rman]

# now define renderman globals interface
LoadExtension rman [file join $cfg gui.rman]

# now load known shader node emulators:
#   all files whose names don't begin with _ represent shading nodes.
set mayaNodesDir [file join $rfmLibDir rsl mayaNodes]
foreach f [glob -nocomplain -- [file join $mayaNodesDir *.h]] {
    if {![string match _* [file tail $f]]} {
        LoadExtension rslt $f
    }
}

set customNodesDir [file join $rfmLibDir rsl customNodes]
foreach f [glob -nocomplain -- [file join $customNodesDir *.{sl,h}]] {
    if ![string match _* [file tail $f]] {
        LoadExtension rslt $f
    }
}

# RfM output dirs are controlled via RMS.ini

# By default: we use the shader compiler that ships with RfM.  You
# can override this command to point to an alternate version. Be aware
# that the internal version of prman may not be compatible with the
# output of an alternate compiler version.
# The form is that of a proper tcl list of arguments.  We employ tcl's 
# list command because RMSTREE can include spaces. 
# The standard include paths point to the internal locations of shadeop 
# plugins and factory templates. You can override factory templates by
# ensuring that your custom template directory precedes the factory
# directory in the searchpaths.  At compile time we substitute
# the %f token with the generated shader filename.
SetPref ShaderCompiler [list $RMSTREE/rmantree/bin/shader \
                            -I$RMSTREE/lib/shaders \
                            -I$RMSTREE/lib/slim/pxCoreV1 \
                            -I$RMSTREE/lib/rfm/rsl -C %f]
SetPref ShaderCompilerCleanup 1

# The ImplicitTxMake pref codifies how to auto-convert maya image source 
# files to renderman textures.  Currently we support 3 classes of TxMakes
# according to their use-cases in maya shading networks. Explicit
# txmake passes follow a different code-path and provide explicit
# control over txmake parameters.
SetPref ImplicitTxMakeFmts {

environmentLatLong {
  MakeLatLongEnvironment "%s" "%s" "separable-catmull-rom" 2 2 "newer" [1]}

imageplane {
  MakeTexture "%s" "%s" "black" "black" "separable-catmull-rom" 2 2 \
"newer" [1] "resize" ["up-"]}

texture {
  MakeTexture "%s" "%s" "periodic" "periodic" "separable-catmull-rom" 2 2 \
"newer" [1] "resize" ["up-"]}

_default {
  MakeTexture "%s" "%s" "periodic" "periodic" "separable-catmull-rom" 2 2 \
"newer" [1] "resize" ["up-"]}

}

# A list of file extensions for which texture conversion should be skipped.
# These are useful for users who have preconverted textures and don't want
# them reconverted according to the rules above.
SetPref NoConvertTextureExtensions {tx tex env ptx}

if {[GetPlatform platform] eq "windows"} {
    # By default we make slim behave like a child window of Maya. Set to 0 to
    # return to the rms1 behavior.
    SetPref ParentSlimsWindow 1
}

#
# -------------------------------------------------------------------------
# previously contained in RenderMan_for_Maya_Pro.ini 
#--------------------------------------------------------------------------
#

# Use RPSVersion to specify which version of RPS is being used, if you wish to
# enable features in the UI that aren't supported by the built-in renderer.
#SetPref RPSVersion 16.2

SetPref RIBGenSvc	RfMRibGen
SetPref LocalRenderCmd	{prman -t:0 -Progress}
SetPref LocalRenderSvc	local:PixarRender
SetPref LocalRfMRenderSvc local:RfMRender
SetPref PreviewRenderCmd {netrender -Progress -f %H}
SetPref PreviewRenderSvc PixarNRM
SetPref RemoteRenderCmd	{prman -t:0 -Progress}
SetPref RemoteRenderSvc	PixarRender
SetPref RemoteRfMRenderSvc RfMRender
SetPref ShoCmd		sho

# The prefs below which begin with Launch* are used for rerendering;
# prman is launched in piped mode.  ie. commands are piped directly
# to the prman or rerender process.  
# There are a few different variants of the launch command
# depending on whether doing raytraced or reyes rerendering,
# and whether the display is 'it' or the maya render view.
# Raytraced rerenders can use the "rerender" executable that ships with RfM,
# whereas reyes rerenders require stand-alone prman.

# The Rerenderer can either be "raytrace" or "reyes"
SetPref Rerenderer raytrace

set rmantree [GetEnv RMANTREE]
set prman $rmantree/bin/prman
set rerender $RMSTREE/bin/rerender
set it [GetPref itLaunchPath]
set ituri [regsub -all " " $it %20]; # replace spaces in path-to-it

SetPref LaunchRaytraceRerenderCmd "launch:${rerender}?"
SetPref LaunchReyesRerenderCmd "launch:${prman}?"
SetPref LaunchStdArgs "-t:0 -Progress -ctrl \$ctrlin \$ctrlout -xcpt \$xcptin"
SetPref LaunchToItArg  "-dspyserver ${ituri}";# pixels to 'it'
SetPref LaunchToRenderViewArg "-dspy \$dspyin \$dspyout";# pixels back over pipe

# alfredLaunchPath:
SetPref alfredLaunchPath {alfred}

# mayaBatchLaunchPath:
#   This is used when maya is launched in batch mode by alfred or tractor.
#   The maya install dir needs to be in your system path or else you
#   need to specify a full path here.
SetPref mayabatchLaunchPath {%D(mayabatch) -batch}

# A menu of these spool styles appears in the Maya batch render dialog window.
# These pairs consist of a label and a mel script. The mel script must return 
# the name of the alfred job script that it generates.  It also needs to do 
# any necessary preliminary work, like immediate RIB generation.
SetPref AlfredSpoolScripts {
    "mayabatch local" rmanSpoolMayaLocal
    "mayabatch remote" rmanSpoolMayaRemote
    "immediate rib, local render" rmanSpoolImmediateRIBLocalRender
    "immediate rib, remote render" rmanSpoolImmediateRIBRemoteRender
    "deferred rib, remote render" rmanSpoolDeferredRIBRemoteRender
    "remote rib, remote render" rmanSpoolRemoteRIBRemoteRender
}

# A menu of these spool styles appears in the render current frame dialog.
SetPref AlfredPreviewSpoolScripts {
    "netrender" rmanSpoolLocalPreviewNetrender
    "local render" rmanSpoolLocalPreviewRender
    "remote render" rmanSpoolRemotePreviewRender
}


set cfgdir [file join [RATGetDir lib] rfm]

# RSL Template Nodes:
#  Pixar has reserved maya node ids: 0x0101261-0x01012ff for our rfm templates
#  Sites should request node id blocks from Alias/Autodesk to prevent 
#  compatibility issues.  Sites should further adopt naming conventions
#  in the form of four-letter prefixes to reduce the risk of template 
#  collision. The prefixes rman and px are reserved by Pixar.
set templdir [file join $cfgdir rsl customNodes]
LoadExtension rslTmplt [file join $templdir rfmManifold.rslt]
LoadExtension rslTmplt [file join $templdir rfmTexture2d.rslt]
LoadExtension rslTmplt [file join $templdir rfmTexture3d.rslt]
LoadExtension rslTmplt [file join $templdir rfmUtility.rslt]

SetPref HelpURLs [list \
 "RMS Docs"  \
   "https://renderman.pixar.com/resources/current/rms/rms_home.html" \
 "RMS Forums"  \
   "https://renderman.pixar.com/forum/forumdisplay.php?s=&forumid=111" \
 "RPS Forums"  \
   "https://renderman.pixar.com/forum/forumdisplay.php?s=&forumid=23" \
	]

# ItNodesScript:
# This mel script is responsible for generating the notes that get sent to 
# It. The default script computes a date and time stamp.
SetPref ItNotesScript { rmanItNotesScript }

# DspyParamsScripts:
# A mel script can be specified for each kind of display driver.  
# Each script generates a string which will be passed to the display 
# driver as a param called dspyParams.  "it" recognizes dspyParams.
SetPref DspyParamsScripts {
    "it" {rmanDspyParamsScript "it" "$PASSID" "$PASSCLASS"}
}

SetPref SlimTetherMode tight
# SlimTetherMode controls the style of communication between RfM and Slim.  
# Options:
#     "tight": slim session data is stored in the maya scene file. This mode
#         was introduced in RMS 3.0 and loosely follows the MTOR-Slim
#         style of tethering.
#     "loose": slim session data stored in external slim session files
#         following the AssetStageStrategy preference.
#   The value in this file represents a site-wide tethering policy.

# RfM has its own version of SlimClientExpression.tcl which implements 
# the interface defined by slim's file with the same name.
LoadExtension tcl [file join $cfg SlimClientExpression.tcl]
LoadExtension rman [file join $cfgdir nodes_slimbake.rman]

RAT::LogMsg DEBUG "RenderMan_for_Maya.ini loaded!"

